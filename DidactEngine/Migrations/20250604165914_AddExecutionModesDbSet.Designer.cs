// <auto-generated />
using System;
using DidactEngine.Services.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DidactEngine.Migrations
{
    [DbContext(typeof(DidactDbContext))]
    [Migration("20250604165914_AddExecutionModesDbSet")]
    partial class AddExecutionModesDbSet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("DidactCore.Entities.BlockRun", b =>
                {
                    b.Property<long>("BlockRunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("BlockName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecutionEnded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecutionStarted")
                        .HasColumnType("TEXT");

                    b.Property<long>("FlowRunId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StateLastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateLastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("BlockRunId");

                    b.HasIndex("FlowRunId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StateId");

                    b.ToTable("BlockRun", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.Engine", b =>
                {
                    b.Property<int>("EngineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("EngineId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UniqueName")
                        .IsUnique();

                    b.ToTable("Engine", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.ExecutionMode", b =>
                {
                    b.Property<int>("ExecutionModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("ExecutionModeId");

                    b.ToTable("ExecutionModes");
                });

            modelBuilder.Entity("DidactCore.Entities.FifoQueue", b =>
                {
                    b.Property<int>("FifoQueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("FifoQueueId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("FifoQueue", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.FifoQueueInbound", b =>
                {
                    b.Property<long>("FifoQueueInboundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("FifoQueueId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FlowRunId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("FifoQueueInboundId");

                    b.HasIndex("FifoQueueId");

                    b.HasIndex("FlowRunId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("FifoQueueInbound", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.Flow", b =>
                {
                    b.Property<long>("FlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ConcurrencyLimit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExecutionModeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FlowId");

                    b.HasIndex("ExecutionModeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Flow", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.FlowRun", b =>
                {
                    b.Property<long>("FlowRunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecuteAfter")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecutionEnded")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExecutionModeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExecutionStarted")
                        .HasColumnType("TEXT");

                    b.Property<long>("FlowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlowVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonPayload")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentFlowRunId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StateLastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("StateLastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TimeoutSeconds")
                        .HasColumnType("TEXT");

                    b.Property<int>("TriggerTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FlowRunId");

                    b.HasIndex("ExecutionModeId");

                    b.HasIndex("FlowId");

                    b.HasIndex("FlowVersionId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StateId");

                    b.HasIndex("TriggerTypeId");

                    b.ToTable("FlowRun", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.FlowSchedule", b =>
                {
                    b.Property<long>("FlowScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("FlowId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextRunTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("ScheduleTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FlowScheduleId");

                    b.HasIndex("FlowId");

                    b.HasIndex("ScheduleTypeId");

                    b.ToTable("FlowSchedule", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.FlowVersion", b =>
                {
                    b.Property<int>("FlowVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssemblyVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FlowId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FlowVersionId");

                    b.HasIndex("FlowId");

                    b.ToTable("FlowVersion");
                });

            modelBuilder.Entity("DidactCore.Entities.HyperQueue", b =>
                {
                    b.Property<int>("HyperQueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("HyperQueueId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("HyperQueue", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.HyperQueueInbound", b =>
                {
                    b.Property<long>("HyperQueueInboundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("FlowRunId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HyperQueueId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("HyperQueueInboundId");

                    b.HasIndex("FlowRunId");

                    b.HasIndex("HyperQueueId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("HyperQueueInbound", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organization", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.ScheduleType", b =>
                {
                    b.Property<int>("ScheduleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("ScheduleTypeId");

                    b.ToTable("ScheduleType", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("StateId");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.TriggerType", b =>
                {
                    b.Property<int>("TriggerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("TriggerTypeId");

                    b.ToTable("TriggerType", (string)null);
                });

            modelBuilder.Entity("DidactCore.Entities.BlockRun", b =>
                {
                    b.HasOne("DidactCore.Entities.FlowRun", "FlowRun")
                        .WithMany("BlockRuns")
                        .HasForeignKey("FlowRunId")
                        .IsRequired()
                        .HasConstraintName("FK_BlockRun_FlowRun");

                    b.HasOne("DidactCore.Entities.Organization", null)
                        .WithMany("BlockRuns")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("DidactCore.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowRun");

                    b.Navigation("State");
                });

            modelBuilder.Entity("DidactCore.Entities.Engine", b =>
                {
                    b.HasOne("DidactCore.Entities.Organization", "Organization")
                        .WithMany("Engines")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_Engine_Organization");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DidactCore.Entities.FifoQueue", b =>
                {
                    b.HasOne("DidactCore.Entities.Organization", "Organization")
                        .WithMany("FifoQueues")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DidactCore.Entities.FifoQueueInbound", b =>
                {
                    b.HasOne("DidactCore.Entities.FifoQueue", "FifoQueue")
                        .WithMany("FifoQueueInbounds")
                        .HasForeignKey("FifoQueueId")
                        .IsRequired()
                        .HasConstraintName("FK_FifoQueueInbound_FifoQueue");

                    b.HasOne("DidactCore.Entities.FlowRun", "FlowRun")
                        .WithMany("FifoQueueInbounds")
                        .HasForeignKey("FlowRunId")
                        .IsRequired()
                        .HasConstraintName("FK_FifoQueueInbound_FlowRun");

                    b.HasOne("DidactCore.Entities.Organization", "Organization")
                        .WithMany("FifoQueueInbounds")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_FifoQueueInbound_Organization");

                    b.Navigation("FifoQueue");

                    b.Navigation("FlowRun");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DidactCore.Entities.Flow", b =>
                {
                    b.HasOne("DidactCore.Entities.ExecutionMode", "ExecutionMode")
                        .WithMany("Flows")
                        .HasForeignKey("ExecutionModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidactCore.Entities.Organization", "Organization")
                        .WithMany("Flows")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_Flow_Organization");

                    b.Navigation("ExecutionMode");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DidactCore.Entities.FlowRun", b =>
                {
                    b.HasOne("DidactCore.Entities.ExecutionMode", "ExecutionMode")
                        .WithMany("FlowRuns")
                        .HasForeignKey("ExecutionModeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DidactCore.Entities.Flow", "Flow")
                        .WithMany("FlowRuns")
                        .HasForeignKey("FlowId")
                        .IsRequired()
                        .HasConstraintName("FK_FlowRun_Flow");

                    b.HasOne("DidactCore.Entities.FlowVersion", null)
                        .WithMany("FlowRuns")
                        .HasForeignKey("FlowVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidactCore.Entities.Organization", null)
                        .WithMany("FlowRuns")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidactCore.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidactCore.Entities.TriggerType", "TriggerType")
                        .WithMany()
                        .HasForeignKey("TriggerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionMode");

                    b.Navigation("Flow");

                    b.Navigation("State");

                    b.Navigation("TriggerType");
                });

            modelBuilder.Entity("DidactCore.Entities.FlowSchedule", b =>
                {
                    b.HasOne("DidactCore.Entities.Flow", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidactCore.Entities.ScheduleType", "ScheduleType")
                        .WithMany()
                        .HasForeignKey("ScheduleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("ScheduleType");
                });

            modelBuilder.Entity("DidactCore.Entities.FlowVersion", b =>
                {
                    b.HasOne("DidactCore.Entities.Flow", "Flow")
                        .WithMany("FlowVersions")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("DidactCore.Entities.HyperQueue", b =>
                {
                    b.HasOne("DidactCore.Entities.Organization", "Organization")
                        .WithMany("HyperQueues")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DidactCore.Entities.HyperQueueInbound", b =>
                {
                    b.HasOne("DidactCore.Entities.FlowRun", "FlowRun")
                        .WithMany("HyperQueueInbounds")
                        .HasForeignKey("FlowRunId")
                        .IsRequired()
                        .HasConstraintName("FK_HyperQueueInbound_FlowRun");

                    b.HasOne("DidactCore.Entities.HyperQueue", "HyperQueue")
                        .WithMany("HyperQueueInbounds")
                        .HasForeignKey("HyperQueueId")
                        .IsRequired()
                        .HasConstraintName("FK_HyperQueueInbound_$HyperQueue");

                    b.HasOne("DidactCore.Entities.Organization", "Organization")
                        .WithMany("HyperQueueInbounds")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_HyperQueueInbound_Organization");

                    b.Navigation("FlowRun");

                    b.Navigation("HyperQueue");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DidactCore.Entities.ExecutionMode", b =>
                {
                    b.Navigation("FlowRuns");

                    b.Navigation("Flows");
                });

            modelBuilder.Entity("DidactCore.Entities.FifoQueue", b =>
                {
                    b.Navigation("FifoQueueInbounds");
                });

            modelBuilder.Entity("DidactCore.Entities.Flow", b =>
                {
                    b.Navigation("FlowRuns");

                    b.Navigation("FlowVersions");
                });

            modelBuilder.Entity("DidactCore.Entities.FlowRun", b =>
                {
                    b.Navigation("BlockRuns");

                    b.Navigation("FifoQueueInbounds");

                    b.Navigation("HyperQueueInbounds");
                });

            modelBuilder.Entity("DidactCore.Entities.FlowVersion", b =>
                {
                    b.Navigation("FlowRuns");
                });

            modelBuilder.Entity("DidactCore.Entities.HyperQueue", b =>
                {
                    b.Navigation("HyperQueueInbounds");
                });

            modelBuilder.Entity("DidactCore.Entities.Organization", b =>
                {
                    b.Navigation("BlockRuns");

                    b.Navigation("Engines");

                    b.Navigation("FifoQueueInbounds");

                    b.Navigation("FifoQueues");

                    b.Navigation("FlowRuns");

                    b.Navigation("Flows");

                    b.Navigation("HyperQueueInbounds");

                    b.Navigation("HyperQueues");
                });
#pragma warning restore 612, 618
        }
    }
}
